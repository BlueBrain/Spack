diff --git a/.gitsubprojects b/.gitsubprojects
index 05a68608..5cd1971b 100644
--- a/.gitsubprojects
+++ b/.gitsubprojects
@@ -8,11 +8,6 @@ if(BRAYNS_DEFLECT_ENABLED)
   git_subproject(Deflect https://github.com/BlueBrain/Deflect.git 038e139)
 endif()
 
-# Data access
-if(BRAYNS_CIRCUITVIEWER_ENABLED)
-  git_subproject(Brion https://github.com/BlueBrain/Brion.git 39ad3483)
-endif()
-
 if(BRAYNS_BBIC_ENABLED AND NOT TARGET HighFive)
-  git_subproject(HighFive https://github.com/BlueBrain/HighFive.git 68fbe8e)
+  git_subproject(HighFive https://github.com/BlueBrain/HighFive.git 67f5b3a6)
 endif()
diff --git a/deps/CMakeLists.txt b/deps/CMakeLists.txt
index a91d0b9a..71191791 100644
--- a/deps/CMakeLists.txt
+++ b/deps/CMakeLists.txt
@@ -25,16 +25,19 @@ if(libuv_FOUND)
   list(APPEND LCOV_EXCLUDE '${PROJECT_SOURCE_DIR}/deps/uvw/*')
 endif()
 
-option(GLM_QUIET "No CMake Message" ON)
-option(GLM_TEST_ENABLE "Build unit tests" OFF)
-option(GLM_TEST_ENABLE_CXX_14 "Enable C++ 14" ON)
-set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)
-set(CMAKE_INSTALL_LIBDIR lib)
-add_subdirectory(glm)
+if(NOT TARGET glm)
+    message(STATUS "Gathering GLM from submodules")
+    option(GLM_QUIET "No CMake Message" ON)
+    option(GLM_TEST_ENABLE "Build unit tests" OFF)
+    option(GLM_TEST_ENABLE_CXX_14 "Enable C++ 14" ON)
+    set(CMAKE_EXPORT_NO_PACKAGE_REGISTRY ON)
+    set(CMAKE_INSTALL_LIBDIR lib)
+    add_subdirectory(glm)
 
-# WAR for https://github.com/g-truc/glm/issues/854
-if(CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
-  target_compile_options(glm INTERFACE -Wno-error=class-memaccess)
+    # WAR for https://github.com/g-truc/glm/issues/854
+    if(CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
+      target_compile_options(glm INTERFACE -Wno-error=class-memaccess)
+    endif()
 endif()
 
 if(BRAYNS_VIEWER_ENABLED)
@@ -66,3 +69,14 @@ endif()
 if(BRAYNS_PBRTV2_ENABLED)
     add_subdirectory(pbrt-v2)
 endif()
+
+# Brion if needed
+if(BRAYNS_CIRCUITVIEWER_ENABLED OR BRAYNS_CIRCUITEXPLORER_ENABLED OR BRAYNS_CIRCUITINFO_ENABLED)
+    common_find_package(Brion)
+    if((NOT Brion_FOUND AND NOT BRION_BOUND) OR NOT TARGET Brion)
+        message(STATUS "Brion not found, gathering from submodules")
+        add_subdirectory(Brion)
+    else()
+        message(STATUS "Found Brion")
+    endif()
+endif()
diff --git a/plugins/CircuitExplorer/.gitignore b/plugins/CircuitExplorer/.gitignore
index 11d47296..49727903 100644
--- a/plugins/CircuitExplorer/.gitignore
+++ b/plugins/CircuitExplorer/.gitignore
@@ -5,11 +5,9 @@ debug/
 release/
 Brion/
 HighFive/
-Keyv/
 Lunchbox/
 MVDTool/
 Servus/
-vmmlib/
 CMakeFiles
 .DS_Store
 *~
diff --git a/plugins/CircuitExplorer/.gitsubprojects b/plugins/CircuitExplorer/.gitsubprojects
index e24861de..c280aa44 100644
--- a/plugins/CircuitExplorer/.gitsubprojects
+++ b/plugins/CircuitExplorer/.gitsubprojects
@@ -1,5 +1,4 @@
 # -*- mode: cmake -*-
-git_subproject(Brion https://github.com/BlueBrain/Brion.git 39ad3483)
 if(NOT TARGET HighFive)
-    git_subproject(HighFive https://github.com/BlueBrain/HighFive.git 68fbe8e)
+    git_subproject(HighFive https://github.com/BlueBrain/HighFive.git 67f5b3a6)
 endif()
diff --git a/plugins/CircuitExplorer/CMakeLists.txt b/plugins/CircuitExplorer/CMakeLists.txt
index d595ff27..1f506279 100644
--- a/plugins/CircuitExplorer/CMakeLists.txt
+++ b/plugins/CircuitExplorer/CMakeLists.txt
@@ -116,7 +116,7 @@ include_directories(
 set(BRAYNSCIRCUITEXPLORER_LINK_LIBRARIES
     PUBLIC ${OSPRAY_LIBRARIES}
     PRIVATE braynsCommon braynsParameters braynsIO braynsEngine braynsPluginAPI
-    braynsOSPRayEngine glm vmmlib Brion Brain
+    braynsOSPRayEngine glm Brion Brain
     ${FREEIMAGE_LIBRARIES} ${HDF5_LIBRARIES}
 )
 
diff --git a/plugins/CircuitExplorer/plugin/CircuitExplorerPlugin.cpp b/plugins/CircuitExplorer/plugin/CircuitExplorerPlugin.cpp
index 5c1f6004..0fe40f22 100644
--- a/plugins/CircuitExplorer/plugin/CircuitExplorerPlugin.cpp
+++ b/plugins/CircuitExplorer/plugin/CircuitExplorerPlugin.cpp
@@ -1747,7 +1747,7 @@ MessageResult CircuitExplorerPlugin::_traceAnterogrades(const AnterogradeTracing
     mrd.glossiness = 1.f;
     mrd.reflectionIndex = 0.f;
     mrd.refractionIndex = 0.f;
-    mrd.opacity = std::max<float>(std::max<float>(payload.nonConnectedCellsColor[4], 0.1f), 1.f);
+    mrd.opacity = std::min<float>(std::max<float>(payload.nonConnectedCellsColor[4], 0.1f), 1.f);
     mrd.shadingMode = static_cast<int>(MaterialShadingMode::none);
     mrd.clippingMode = static_cast<int>(MaterialClippingMode::no_clipping);
     mrd.simulationDataCast = true;
diff --git a/plugins/CircuitExplorer/plugin/io/AbstractCircuitLoader.cpp b/plugins/CircuitExplorer/plugin/io/AbstractCircuitLoader.cpp
index 42847ff4..f25554ec 100644
--- a/plugins/CircuitExplorer/plugin/io/AbstractCircuitLoader.cpp
+++ b/plugins/CircuitExplorer/plugin/io/AbstractCircuitLoader.cpp
@@ -394,9 +394,7 @@ brayns::ModelDescriptorPtr AbstractCircuitLoader::importCircuit(
                                  reportType, allGids);
 
     // Cell transformations
-    Matrix4fs allTransformations;
-    for (const auto &transformation : circuit.getTransforms(allGids))
-        allTransformations.push_back(vmmlib_to_glm(transformation));
+    Matrix4fs allTransformations = circuit.getTransforms(allGids);
 
     // Filter out guids according to clipping planes
     if (cellClipping)
@@ -1041,20 +1039,14 @@ void AbstractCircuitLoader::_buildAfferentSynapses(
     const brain::Synapse &synapse, const size_t materialId, const float radius,
     brayns::Model &model) const
 {
-    const brayns::Vector3f from(synapse.getPostsynapticSurfacePosition().x(),
-                                synapse.getPostsynapticSurfacePosition().y(),
-                                synapse.getPostsynapticSurfacePosition().z());
-    model.addSphere(materialId, {from, radius});
+    model.addSphere(materialId, {synapse.getPostsynapticSurfacePosition(), radius});
 }
 
 void AbstractCircuitLoader::_buildEfferentSynapses(
     const brain::Synapse &synapse, const size_t materialId, const float radius,
     brayns::Model &model) const
 {
-    const brayns::Vector3f from(synapse.getPresynapticSurfacePosition().x(),
-                                synapse.getPresynapticSurfacePosition().y(),
-                                synapse.getPresynapticSurfacePosition().z());
-    model.addSphere(materialId, {from, radius});
+    model.addSphere(materialId, {synapse.getPresynapticSurfacePosition(), radius});
 }
 
 brayns::ModelDescriptorPtr AbstractCircuitLoader::importFromBlob(
diff --git a/plugins/CircuitExplorer/plugin/io/AstrocyteLoader.cpp b/plugins/CircuitExplorer/plugin/io/AstrocyteLoader.cpp
index ab037f36..e1dac549 100644
--- a/plugins/CircuitExplorer/plugin/io/AstrocyteLoader.cpp
+++ b/plugins/CircuitExplorer/plugin/io/AstrocyteLoader.cpp
@@ -147,7 +147,7 @@ void AstrocyteLoader::_importMorphologiesFromURIs(
 
     for (uint64_t i = 0; i < uris.size(); ++i)
     {
-        const auto uri = servus::URI(uris[i]);
+        const auto uri = brion::URI(uris[i]);
         const auto materialId =
             (colorScheme == MorphologyColorScheme::none ? i
                                                         : brayns::NO_MATERIAL);
diff --git a/plugins/CircuitExplorer/plugin/io/MorphologyLoader.cpp b/plugins/CircuitExplorer/plugin/io/MorphologyLoader.cpp
index 415605de..d4fd0468 100644
--- a/plugins/CircuitExplorer/plugin/io/MorphologyLoader.cpp
+++ b/plugins/CircuitExplorer/plugin/io/MorphologyLoader.cpp
@@ -83,7 +83,7 @@ bool MorphologyLoader::isSupported(const std::string& /*filename*/,
 }
 
 MorphologyInfo MorphologyLoader::importMorphology(
-    const brayns::PropertyMap& properties, const servus::URI& source,
+    const brayns::PropertyMap& properties, const brion::URI& source,
     brayns::Model& model, const uint64_t index,
     const brayns::Matrix4f& transformation, brain::Synapses* afferentSynapses,
     brain::Synapses* efferentSynapses,
@@ -103,7 +103,7 @@ MorphologyInfo MorphologyLoader::importMorphology(
 }
 
 void MorphologyLoader::_importMorphology(
-    const brayns::PropertyMap& properties, const servus::URI& source,
+    const brayns::PropertyMap& properties, const brion::URI& source,
     const uint64_t index, ParallelModelContainer& model,
     const brayns::Matrix4f& transformation,
     CompartmentReportPtr compartmentReport, brain::Synapses* afferentSynapses,
@@ -156,7 +156,7 @@ void MorphologyLoader::_importMorphologyAsPoint(
 }
 
 void MorphologyLoader::_createRealisticSoma(
-    const brayns::PropertyMap& properties, const servus::URI& uri,
+    const brayns::PropertyMap& properties, const brion::URI& uri,
     ParallelModelContainer& model) const
 {
     brain::neuron::SectionTypes sectionTypes;
@@ -186,8 +186,7 @@ void MorphologyLoader::_createRealisticSoma(
     {
         // Soma
         const auto& soma = morphology.getSoma();
-        model.morphologyInfo.somaPosition =
-            glm::make_vec3(morphology.getSoma().getCentroid().array);
+        model.morphologyInfo.somaPosition = morphology.getSoma().getCentroid();
         const auto radius =
             _getCorrectedRadius(properties, soma.getMeanRadius());
         metaballs.push_back({model.morphologyInfo.somaPosition.x,
@@ -215,9 +214,9 @@ void MorphologyLoader::_createRealisticSoma(
         for (size_t i = 0; i < samplesToProcess; ++i)
         {
             const auto& sample = samples[i];
-            const brayns::Vector3f position(sample.x(), sample.y(), sample.z());
+            const brayns::Vector3f position(sample);
             const auto radius =
-                _getCorrectedRadius(properties, sample.w() * 0.5f);
+                _getCorrectedRadius(properties, sample.w * 0.5f);
             if (radius > 0.f)
                 metaballs.push_back(
                     {position.x, position.y, position.z, radius});
@@ -260,13 +259,12 @@ void MorphologyLoader::_connectSDFSomaChildren(
     for (const auto& child : somaChildren)
     {
         const auto& samples = child.getSamples();
-        const brayns::Vector3f sample{samples[0].x(), samples[0].y(),
-                                      samples[0].z()};
+        const brayns::Vector3f sample(samples[0]);
 
         // Create a sigmoid cone with half of soma radius to center of soma
         // to give it an organic look.
         const auto radiusEnd =
-            _getCorrectedRadius(properties, samples[0].w() * 0.5f);
+            _getCorrectedRadius(properties, samples[0].w * 0.5f);
         const size_t geomIdx =
             _addSDFGeometry(sdfMorphologyData,
                             brayns::createSDFConePillSigmoid(
@@ -444,9 +442,9 @@ MorphologyTreeStructure MorphologyLoader::_calculateMorphologyTreeStructure(
             const auto& sample = samples[0];
 
             const auto radius =
-                _getCorrectedRadius(properties, sample.w() * 0.5f);
+                 _getCorrectedRadius(properties, sample.w * 0.5f);
 
-            const brayns::Vector3f position(sample.x(), sample.y(), sample.z());
+            const brayns::Vector3f position(sample);
 
             bifurcationPosition[sectionI].first = radius;
             bifurcationPosition[sectionI].second = position;
@@ -454,9 +452,8 @@ MorphologyTreeStructure MorphologyLoader::_calculateMorphologyTreeStructure(
 
         { // Branch end
             const auto& sample = samples.back();
-            const auto radius =
-                _getCorrectedRadius(properties, sample.w() * 0.5f);
-            const brayns::Vector3f position(sample.x(), sample.y(), sample.z());
+            const auto radius = _getCorrectedRadius(properties, sample.w * 0.5f);
+            const brayns::Vector3f position(sample);
             sectionEndPosition[sectionI].first = radius;
             sectionEndPosition[sectionI].second = position;
         }
@@ -543,8 +540,7 @@ void MorphologyLoader::_addSomaGeometry(const brayns::PropertyMap& properties,
     const size_t materialId =
         _getMaterialIdFromColorScheme(properties,
                                       brain::neuron::SectionType::soma);
-    model.morphologyInfo.somaPosition =
-        glm::make_vec3(soma.getCentroid().array);
+    model.morphologyInfo.somaPosition = soma.getCentroid();
     const double somaRadius =
         _getCorrectedRadius(properties, soma.getMeanRadius());
     const auto& children = soma.getChildren();
@@ -568,12 +564,11 @@ void MorphologyLoader::_addSomaGeometry(const brayns::PropertyMap& properties,
             for (const auto& child : children)
             {
                 const auto& samples = child.getSamples();
-                const brayns::Vector3f sample{samples[0].x(), samples[0].y(),
-                                              samples[0].z()};
+                const brayns::Vector3f sample(samples[0]);
 
                 model.morphologyInfo.bounds.merge(sample);
                 const double sampleRadius =
-                    _getCorrectedRadius(properties, samples[0].w() * 0.5f);
+                    _getCorrectedRadius(properties, samples[0].w * 0.5f);
 
                 model.addCone(materialId,
                               {model.morphologyInfo.somaPosition, sample,
@@ -678,7 +673,7 @@ float MorphologyLoader::_distanceToSoma(const brain::neuron::Section& section,
 }
 
 void MorphologyLoader::_importMorphologyFromURI(
-    const brayns::PropertyMap& properties, const servus::URI& uri,
+    const brayns::PropertyMap& properties, const brion::URI& uri,
     const uint64_t index, const brayns::Matrix4f& /*transformation*/,
     CompartmentReportPtr compartmentReport, ParallelModelContainer& model,
     brain::Synapses* /*afferentSynapses*/,
@@ -788,7 +783,7 @@ void MorphologyLoader::_importMorphologyFromURI(
             _getCorrectedRadius(properties,
                                 section.hasParent()
                                     ? _getLastSampleRadius(section.getParent())
-                                    : samples[0].w() * 0.5f);
+                                    : samples[0].w * 0.5f);
 
         bool done = false;
         for (size_t i = step; !done && i < numSamples + step; i += step)
@@ -851,15 +846,15 @@ void MorphologyLoader::_importMorphologyFromURI(
             }
 
             const auto sample = samples[i];
-            brayns::Vector3f position(sample.x(), sample.y(), sample.z());
-            brayns::Vector3f target(previousSample.x(), previousSample.y(),
-                                    previousSample.z());
+            brayns::Vector3f position(sample);
+            brayns::Vector3f target(previousSample);
+
 
             model.morphologyInfo.bounds.merge(position);
             model.morphologyInfo.bounds.merge(target);
 
             auto radius =
-                _getCorrectedRadius(properties, samples[i].w() * 0.5f);
+                _getCorrectedRadius(properties, samples[i].w * 0.5f);
             const double maxRadiusChange = 0.1f;
 
             const double dist = glm::length(target - position);
@@ -957,7 +952,7 @@ brayns::ModelDescriptorPtr MorphologyLoader::importFromFile(
     // the UI
 
     auto model = _scene.createModel();
-    importMorphology(props, servus::URI(fileName), *model, 0);
+    importMorphology(props, brion::URI(fileName), *model, 0);
     createMissingMaterials(*model);
 
     auto modelDescriptor =
diff --git a/plugins/CircuitExplorer/plugin/io/MorphologyLoader.h b/plugins/CircuitExplorer/plugin/io/MorphologyLoader.h
index f7b76822..a11d542f 100644
--- a/plugins/CircuitExplorer/plugin/io/MorphologyLoader.h
+++ b/plugins/CircuitExplorer/plugin/io/MorphologyLoader.h
@@ -35,11 +35,6 @@
 #include <unordered_map>
 #include <vector>
 
-namespace servus
-{
-class URI;
-}
-
 class AdvancedCircuitLoader;
 struct ParallelModelContainer;
 using GIDOffsets = std::vector<uint64_t>;
@@ -105,7 +100,7 @@ public:
      * @return Information about the morphology
      */
     MorphologyInfo importMorphology(
-        const brayns::PropertyMap& properties, const servus::URI& source,
+        const brayns::PropertyMap& properties, const brion::URI& source,
         brayns::Model& model, const uint64_t index,
         const brayns::Matrix4f& transformation = brayns::Matrix4f(),
         brain::Synapses* afferentSynapses = nullptr,
@@ -143,7 +138,7 @@ private:
                                const double radius) const;
 
     void _importMorphology(const brayns::PropertyMap& properties,
-                           const servus::URI& source, const uint64_t index,
+                           const brion::URI& source, const uint64_t index,
                            ParallelModelContainer& model,
                            const brayns::Matrix4f& transformation,
                            CompartmentReportPtr compartmentReport,
@@ -174,7 +169,7 @@ private:
      * @param scene Scene to which the morphology should be loaded into
      */
     void _createRealisticSoma(const brayns::PropertyMap& properties,
-                              const servus::URI& uri,
+                              const brion::URI& uri,
                               ParallelModelContainer& model) const;
 
     size_t _addSDFGeometry(SDFMorphologyData& sdfMorphologyData,
@@ -258,7 +253,7 @@ private:
      * into
      */
     void _importMorphologyFromURI(
-        const brayns::PropertyMap& properties, const servus::URI& uri,
+        const brayns::PropertyMap& properties, const brion::URI& uri,
         const uint64_t index, const brayns::Matrix4f& transformation,
         CompartmentReportPtr compartmentReport, ParallelModelContainer& model,
         brain::Synapses* afferentSynapses = nullptr,
diff --git a/plugins/CircuitExplorer/plugin/io/SynapseJSONLoader.cpp b/plugins/CircuitExplorer/plugin/io/SynapseJSONLoader.cpp
index 9a5f3e0b..fec84076 100644
--- a/plugins/CircuitExplorer/plugin/io/SynapseJSONLoader.cpp
+++ b/plugins/CircuitExplorer/plugin/io/SynapseJSONLoader.cpp
@@ -109,9 +109,7 @@ brayns::ModelDescriptorPtr SynapseJSONLoader::importSynapsesFromGIDs(
                                      MaterialShadingMode::none));
         material->setEmission(synapseAttributes.lightEmission);
 
-        const auto pre = synapse.getPresynapticCenterPosition();
-        const auto radius = _synapseAttributes.radius;
-        model->addSphere(i, {{pre.x(), pre.y(), pre.z()}, radius});
+        model->addSphere(i, {synapse.getPresynapticCenterPosition(), _synapseAttributes.radius});
         ++i;
     }
 
diff --git a/plugins/CircuitExplorer/plugin/io/Utils.cpp b/plugins/CircuitExplorer/plugin/io/Utils.cpp
index c5a81796..ee82059c 100644
--- a/plugins/CircuitExplorer/plugin/io/Utils.cpp
+++ b/plugins/CircuitExplorer/plugin/io/Utils.cpp
@@ -28,20 +28,6 @@ brayns::Vector3f get_translation(const brayns::Matrix4f& matrix)
                             glm::value_ptr(matrix)[14]);
 }
 
-brain::Matrix4f glm_to_vmmlib(const brayns::Matrix4f& matrix)
-{
-    brain::Matrix4f tf;
-    memcpy(&tf.array, glm::value_ptr(matrix), sizeof(tf.array));
-    return tf;
-}
-
-brayns::Matrix4f vmmlib_to_glm(const brain::Matrix4f& matrix)
-{
-    brayns::Matrix4f tf;
-    memcpy(glm::value_ptr(tf), &matrix.array, sizeof(matrix.array));
-    return tf;
-}
-
 bool inBox(const brayns::Vector3f& point, const brayns::Boxf& box)
 {
     const auto min = box.getMin();
diff --git a/plugins/CircuitExplorer/plugin/io/Utils.h b/plugins/CircuitExplorer/plugin/io/Utils.h
index 1f167cf6..3abb0fe9 100644
--- a/plugins/CircuitExplorer/plugin/io/Utils.h
+++ b/plugins/CircuitExplorer/plugin/io/Utils.h
@@ -27,8 +27,6 @@
 #include <brayns/common/types.h>
 
 brayns::Vector3f get_translation(const brayns::Matrix4f& matrix);
-brain::Matrix4f glm_to_vmmlib(const brayns::Matrix4f& matrix);
-brayns::Matrix4f vmmlib_to_glm(const brain::Matrix4f& matrix);
 bool inBox(const brayns::Vector3f& point, const brayns::Boxf& box);
 
 #endif // CIRCUIT_EXPLORER_UTILS_H
diff --git a/plugins/CircuitExplorer/plugin/io/VoltageSimulationHandler.cpp b/plugins/CircuitExplorer/plugin/io/VoltageSimulationHandler.cpp
index 28059acb..363b7043 100644
--- a/plugins/CircuitExplorer/plugin/io/VoltageSimulationHandler.cpp
+++ b/plugins/CircuitExplorer/plugin/io/VoltageSimulationHandler.cpp
@@ -25,7 +25,7 @@
 
 #include <brayns/parameters/AnimationParameters.h>
 
-#include <servus/types.h>
+#include <brion/types.h>
 
 VoltageSimulationHandler::VoltageSimulationHandler(
     const std::string& reportPath, const brion::GIDSet& gids,
diff --git a/plugins/CircuitInfo/CircuitInfoPlugin.cpp b/plugins/CircuitInfo/CircuitInfoPlugin.cpp
index 7200e058..1b9158e0 100644
--- a/plugins/CircuitInfo/CircuitInfoPlugin.cpp
+++ b/plugins/CircuitInfo/CircuitInfoPlugin.cpp
@@ -29,8 +29,9 @@
 #include <brayns/engine/Scene.h>
 #include <brayns/pluginapi/PluginAPI.h>
 
-#include <brain/brain.h>
+#include <brion/types.h>
 #include <brion/brion.h>
+#include <brain/brain.h>
 
 #include <set>
 
diff --git a/plugins/CircuitRenderer/CMakeLists.txt b/plugins/CircuitRenderer/CMakeLists.txt
index d6ebc9af..ef2a0ffc 100644
--- a/plugins/CircuitRenderer/CMakeLists.txt
+++ b/plugins/CircuitRenderer/CMakeLists.txt
@@ -17,7 +17,6 @@ endif()
 
 include(Common)
 common_find_package(ospray 1.8 SYSTEM)
-common_find_package(vmmlib REQUIRED)
 common_find_package_post()
 
 list(APPEND CMAKE_MODULE_PATH ${OSPRAY_CMAKE_ROOT})
@@ -59,7 +58,7 @@ include_directories(
 
 set(BRAYNSCIRCUITRENDERER_LINK_LIBRARIES
     PUBLIC ${OSPRAY_LIBRARIES}
-    PRIVATE braynsCommon braynsParameters braynsEngine braynsPluginAPI braynsOSPRayEngine glm vmmlib)
+    PRIVATE braynsCommon braynsParameters braynsEngine braynsPluginAPI braynsOSPRayEngine glm)
 
 set(BRAYNSCIRCUITRENDERER_OMIT_LIBRARY_HEADER ON)
 set(BRAYNSCIRCUITRENDERER_OMIT_VERSION_HEADERS ON)
diff --git a/plugins/CircuitViewer/io/CircuitLoader.cpp b/plugins/CircuitViewer/io/CircuitLoader.cpp
index 965f200f..d3b4e071 100644
--- a/plugins/CircuitViewer/io/CircuitLoader.cpp
+++ b/plugins/CircuitViewer/io/CircuitLoader.cpp
@@ -550,7 +550,7 @@ public:
         auto positions = circuit.getPositions(allGids);
         Boxf center;
         for (const auto& position : positions)
-            center.merge(glm::make_vec3(position.array));
+            center.merge(position);
 
         Transformation transformation;
         transformation.setRotationCenter(center.getCenter());
@@ -653,8 +653,7 @@ private:
                 reportMapping ? reportMapping->getOffsets()[i][0] : 0;
             const float radius =
                 mtypeRadii[mtypes[i]] * _morphologyParams.radiusMultiplier;
-            model.addSphere(materialId, {glm::make_vec3(positions[i].array),
-                                         radius, offset});
+            model.addSphere(materialId, {positions[i], radius, offset});
             callback.updateProgress(message.str(), i / float(gids.size()));
         }
     }
diff --git a/plugins/CircuitViewer/io/MorphologyLoader.cpp b/plugins/CircuitViewer/io/MorphologyLoader.cpp
index 6c3a7266..b1123513 100644
--- a/plugins/CircuitViewer/io/MorphologyLoader.cpp
+++ b/plugins/CircuitViewer/io/MorphologyLoader.cpp
@@ -466,18 +466,15 @@ public:
                     const auto& parent = section.getParent();
                     if (parent.getNumSamples() > 2)
                     {
-                        const auto& s =
-                            parent.getSamples()[parent.getNumSamples() - 2];
-                        samples.emplace_back(s.x(), s.y(), s.z(), s.w());
+                        samples.emplace_back(parent.getSamples()[parent.getNumSamples() - 2]);
                         useFirstSDFBezierCurves = false;
                     }
                 }
                 else if (std::find(somaChildren.begin(), somaChildren.end(),
                                    section) != somaChildren.end())
                 {
-                    const auto& s = soma.getCentroid();
-                    samples.emplace_back(s.x(), s.y(), s.z(),
-                                         soma.getMeanRadius());
+                    const auto s = soma.getCentroid();
+                    samples.emplace_back(s.x, s.y, s.z, soma.getMeanRadius());
                     useFirstSDFBezierCurves = false;
                 }
             }
@@ -493,16 +490,14 @@ public:
                 // always add first and last sample
                 if (i > 0 && i < samples_.size() - 1)
                 {
-                    Vector4f& prevSample = samples.back();
-                    const float dist =
-                        glm::distance(Vector3f(s.x(), s.y(), s.z()),
-                                      Vector3f(prevSample));
+                    const Vector4f& prevSample = samples.back();
+                    const float dist = glm::distance(Vector3f(s), Vector3f(prevSample));
 
-                    validSample = (dist >= (s.w() + prevSample.w));
+                    validSample = (dist >= (s.w + prevSample.w));
                 }
 
                 if (validSample)
-                    samples.emplace_back(s.x(), s.y(), s.z(), s.w());
+                    samples.emplace_back(s);
             }
 
             const size_t numSamples = samples.size();
@@ -641,13 +636,12 @@ private:
         for (const auto& child : somaChildren)
         {
             const auto& samples = child.getSamples();
-            const Vector3f sample{samples[0].x(), samples[0].y(),
-                                  samples[0].z()};
+            const Vector3f& sample = samples[0];
 
             // Create a sigmoid cone with half of soma radius to center of soma
             // to give it an organic look.
             const float radiusEnd =
-                samples[0].w() * 0.5f * _params.radiusMultiplier;
+                samples[0].w * 0.5f * _params.radiusMultiplier;
             const size_t geomIdx =
                 _addSDFGeometry(sdfData,
                                 createSDFConePillSigmoid(somaPosition, sample,
@@ -670,7 +664,7 @@ private:
     {
         const size_t materialId =
             materialFunc(brain::neuron::SectionType::soma);
-        const auto somaPosition = glm::make_vec3(soma.getCentroid().array);
+        const auto somaPosition = soma.getCentroid();
         const float somaRadius =
             soma.getMeanRadius() * _params.radiusMultiplier;
         const auto& children = soma.getChildren();
@@ -720,7 +714,7 @@ ModelDescriptorPtr MorphologyLoader::importFromFile(
     auto model = _scene.createModel();
     const auto params = MorphologyLoaderParams(properties);
 
-    brain::neuron::Morphology morphology{servus::URI(fileName)};
+    brain::neuron::Morphology morphology{brion::URI(fileName)};
 
     auto impl = MorphologyLoader::Impl(params);
 
@@ -731,8 +725,7 @@ ModelDescriptorPtr MorphologyLoader::importFromFile(
     callback.updateProgress("Loading " + modelName + " ...", 1.f);
 
     Transformation transformation;
-    transformation.setRotationCenter(
-        glm::make_vec3(morphology.getSoma().getCentroid().array));
+    transformation.setRotationCenter(morphology.getSoma().getCentroid());
     auto modelDescriptor =
         std::make_shared<ModelDescriptor>(std::move(model), fileName);
     modelDescriptor->setTransformation(transformation);
diff --git a/plugins/CircuitViewer/io/SimulationHandler.cpp b/plugins/CircuitViewer/io/SimulationHandler.cpp
index 3467b4c8..ccf2b668 100644
--- a/plugins/CircuitViewer/io/SimulationHandler.cpp
+++ b/plugins/CircuitViewer/io/SimulationHandler.cpp
@@ -26,7 +26,7 @@
 #include <brain/compartmentReport.h>
 #include <brain/compartmentReportMapping.h>
 
-#include <servus/types.h>
+#include <brion/types.h>
 
 namespace brayns
 {

