def link_latest(redeploy, stage) {
    if (redeploy) {
        sh "./deploy.sh -l ${stage}"
    }
}

pipeline {
    agent {
        label 'bb5-full'
    }

    options {
        timestamps()
    }

    parameters {
        string(name: 'DEPLOYMENT_DATE',
               defaultValue: 'latest',
               description: 'Date to use when deploying, in YYYY-MM-DD format, or "latest".')
        booleanParam(name: 'REDEPLOY',
                     defaultValue: false,
                     description: 'Start a new deployment and set the "latest" symlinks to it')
        text(name: 'STAGES',
             defaultValue: 'compilers\ntools\nserial_libraries\nparallel_libraries\napplications',
             description: 'Which parts of the deployment chain to build')
    }

    environment {
        DEPLOYMENT_ROOT = "/gpfs/bbp.cscs.ch/apps/hpc/test/jenkins/deployment"
        BASEDIR = "${DEPLOYMENT_ROOT}/deploy/spack/deploy"
        TMPDIR = "/dev/shm/jenkins"
    }

    stages {
        stage('Setup') {
            // General setup: make sure that Spack is installed and that
            // license files are available to Spack
            steps {
                dir("${DEPLOYMENT_ROOT}/deploy/spack") {
                    git(url: "https://github.com/BlueBrain/spack.git", branch: "spack_chain")
                }
                dir("${DEPLOYMENT_ROOT}/deploy/spack/etc/spack/licenses") {
                    git(url: "ssh://bbpcode.epfl.ch/user/kumbhar/spack-licenses")
                }
            }
        }

        // stage('Archival') {
        //     // When tagging a new release, reset the symlinks pointing to
        //     // the last release
        //     when {
        //         tag pattern: "release-\\d+", comparator: "REGEXP"
        //     }

        //     steps {
        //         sh "ls"
        //     }
        // }

        stage('Compilers') {
            when {
                expression {
                    return 'compilers' in params.STAGES.tokenize()
                }
            }

            steps {
                dir("${BASEDIR}") {
                    sh "./deploy.sh compilers"
                }
            }

            post {
                always {
                    archiveArtifacts artifacts: "stacks/compilers.xml"
                    junit testResults: "stacks/compilers.xml", allowEmptyResults: true
                }

                success {
                    link_latest(params.REDEPLOY, "compilers")
                }
            }
        }

        stage('Tools') {
            when {
                expression {
                    return 'tools' in params.STAGES.tokenize()
                }
            }

            steps {
                dir("${BASEDIR}") {
                    sh "./deploy.sh tools"
                }
            }

            post {
                always {
                    archiveArtifacts artifacts: "stacks/tools.xml"
                    junit testResults: "stacks/tools.xml", allowEmptyResults: true
                }

                success {
                    link_latest(params.REDEPLOY, "tools")
                }
            }
        }

        stage('Serial Libraries') {
            when {
                expression {
                    return 'serial-libraries' in params.STAGES.tokenize()
                }
            }

            steps {
                dir("${BASEDIR}") {
                    sh "./deploy.sh serial-libraries"
                }
            }

            post {
                always {
                    archiveArtifacts artifacts: "stacks/serial-libraries.xml"
                    junit testResults: "stacks/serial-libraries.xml", allowEmptyResults: true
                }

                success {
                    link_latest(params.REDEPLOY, "serial-libraries")
                }
            }
        }

        stage('Parallel Libraries') {
            when {
                expression {
                    return 'parallel-libraries' in params.STAGES.tokenize()
                }
            }

            steps {
                dir("${BASEDIR}") {
                    sh "./deploy.sh parallel-libraries"
                }
            }

            post {
                always {
                    archiveArtifacts artifacts: "stacks/parallel-libraries.xml"
                    junit testResults: "stacks/parallel-libraries.xml", allowEmptyResults: true
                }

                success {
                    link_latest(params.REDEPLOY, "parallel-libraries")
                }
            }
        }

        stage('Applications') {
            when {
                expression {
                    return 'applications' in params.STAGES.tokenize()
                }
            }

            steps {
                dir("${BASEDIR}") {
                    sh "./deploy.sh applications"
                }
            }

            post {
                always {
                    archiveArtifacts artifacts: "stacks/applications.xml"
                    junit testResults: "stacks/applications.xml", allowEmptyResults: true
                }

                success {
                    link_latest(params.REDEPLOY, "applications")
                }
            }
        }
    }
}
